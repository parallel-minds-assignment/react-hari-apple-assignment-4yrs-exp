// omdbApiSlice.ts
// This file defines the RTK Query API slice for interacting with the OMDb API

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { toast } from 'react-toastify';

/**
 * Fetch OMDb API key and base URL from environment variables. 
 */
const API_KEY = import.meta.env.VITE_OMDB_API_KEY;
const BASE_URL = import.meta.env.VITE_OMDB_BASE_URL;
const toastId = 'limit-toast';

export const omdbApiSlice = createApi({
  reducerPath: 'omdbApi',

  // The base query function used to fetch data from the OMDb API
  baseQuery: fetchBaseQuery({ baseUrl: BASE_URL }),
  endpoints: (builder) => ({

    /**
     * Endpoint to search for movies by a search term.
     */
    searchMovies: builder.query<any, { searchTerm: string; page: number }>({
      query: ({ searchTerm, page }) => `?apikey=${API_KEY}&s=${searchTerm}&page=${page}`,
      async onQueryStarted(_arg, { queryFulfilled }) {
        try {
          await queryFulfilled;
        } catch (error: any) {
          const message = error?.error?.data?.Error;
          if (message && !toast.isActive(toastId)) {
            toast.error(message, { toastId });
          }
        }
      },
    }),

    /**
     * Endpoint to get detailed information about a movie by IMDb ID.
     */
    getMovieById: builder.query<any, string>({
      query: (imdbID) => `?apikey=${API_KEY}&i=${imdbID}`,
      async onQueryStarted(_arg, { queryFulfilled }) {
        try {
          await queryFulfilled;
        } catch (error: any) {
          const message = error?.error?.data?.Error;
          if (message && !toast.isActive(toastId)) {
            toast.error(message, { toastId });
          }
        }
      },
    }),
  }),
});

// Export hooks generated by RTK Query for each endpoint.
// These hooks can be used directly in React components.
export const { useSearchMoviesQuery, useGetMovieByIdQuery } = omdbApiSlice;
